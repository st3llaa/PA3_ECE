*******************************************************
 Review of submitted file(s) ...
       Use the scroll bar to scan through the files 
       Press space to move forward one page at a time 
       Press 'q' to quit 
*******************************************************


==> .SUBMITTED/digit.c <==
 /**********************************************************************
  * Libraries
 ***********************************************************************/
 #include <stdio.h>
 
 
 
 /**********************************************************************
  * Predefined functions: Call these functions in your code to get user
  *                       input and report information to the user.
  *                       Do not modify these functions.
 ***********************************************************************/
 
 // Asks the user for a number and returns that number        
 long get_input() {
     long input;
     printf(" Enter a non-negative number (of at most 18 digits): ");
     scanf("%ld",&input);
     return input;
 }
 
 // Prints the final output
 void print_output(int highest_digit) {
     printf(" The highest digit in the number is %d.\n", highest_digit);
 }
 
 
 
 /**********************************************************************
  * Main functionality: Write your code for finding the highest 
  *                     digit below.
 ***********************************************************************/
 long digits(long n){
 	long max = 0;
 	while(n>0){
 		long digit = n % 10;
 		if(digit > max)
 			max = digit;
 		n = n/10;
 	}
 	return max;
 }
 
 int main(){
 	long userResponse = get_input();
 	long max = digits(userResponse);
 	print_output(max);
 }
 
 ==> .SUBMITTED/got_2player.c <==
 /**********************************************************************
  * Libraries: You may need to add additional libraries
 ***********************************************************************/
 #include <stdio.h>
 
 
 
 /**********************************************************************
  * Predefined functions: Call these functions in your code to get user
  *                       input and report information to the user.
  *                       Do not modify these functions.
 ***********************************************************************/
 
 // Asks the user how many rounds to play
 void get_rounds(int *num_rounds) {
         printf("\n");
         printf(" Enter how many rounds you want to play:   ");
         scanf("%d", num_rounds);
         printf("\n");
 }
 
 // Asks the user whether the player cooperates or not
 // The result is passed back by the pointer 'move'
 void get_player_move(int *move) {
         printf(" Does the player cooperate (1) or not (0): ");
         scanf("%d", move);
 }
 
 // Prints the moves both players are making
 void print_moves(int move_player1, int move_player2) {
         printf(" Player 1 played %d", move_player1);
         printf(" and player 2 played %d \n", move_player2);
         printf("\n");
 }
 
 // Prints the final score for the two players 
 void print_scores(int score_player1, int score_player2) {
         printf(" Player 1 score:  %d\n", score_player1);
         printf(" Player 2 score:  %d\n", score_player2);
         printf("\n");
 }
 
 /**********************************************************************
  * Main functionality: Write your code for implementing the game of 
  *                     trust below.
 ***********************************************************************/
 
 int main(){
 	int rounds = 0;
 	get_rounds(&rounds);
 	int p1 = 0;
 	int p2 = 0;
 	//player 1
 	int currentMoveP1 = -1;
 	//player 2
 	int currentMoveP2 = -1;
 
 	int i;
 	for(i=0; i<rounds;i++){
 		get_player_move(&currentMoveP1);
 		get_player_move(&currentMoveP2);
 		if(currentMoveP1 == 1 && currentMoveP2 == 1){ //both coorporate
 			p1 = p1 + 2;
 			p2 = p2 + 2;
 		}
 		else if(currentMoveP1 > currentMoveP2){ //only P1 coorporates, P2 cheats
 			p1 = p1 - 1;
 			p2 = p2 + 3;
 		}
 		else if(currentMoveP2 > currentMoveP1){ //only P2 coorporates, P1 cheats
 			p2 = p2 -1;
 			p1 = p1 + 3;
 		}
 		print_moves(currentMoveP1, currentMoveP2);
 	}
 	print_scores(p1, p2);
 }
 
 ==> .SUBMITTED/got_AI.c <==
 /**********************************************************************
  * Libraries: You may need to add additional libraries
 ***********************************************************************/
 #include <stdio.h>
 #include <stdlib.h>
 #include <time.h>
 
 
 /**********************************************************************
  * Constants: Use these constants in your code rather than
  *            the numerical values. We may modify these values when
  *            grading.
 ***********************************************************************/
 
 // Constants identifying the strategy that the opponent plays
 #define ALWAYS_COOPERATE        1       // Strategy "always cooperate"
 #define MOSTLY_CHEAT            2       // Strategy "mostly cheat"
 #define JOKER                   3       // Strategy "joker", aka "random"
 #define COPYCAT                 4       // Strategy "copycat"
 #define GRUDGER                 5       // Strategy "grudger"
 #define COPYKITTEN              6       // Strategy "copykitten"
 
 // Constant specifying the probability for the joker strategy to cooperate
 #define PROBABILITY             0.5
 
 
 
 /**********************************************************************
  * Predefined functions: Call these functions in your code to get user
  *                       input and report information to the user.
  *                       Do not modify these functions.
 ***********************************************************************/
 
 // Asks the user what strategy the computer player should use
 void get_strategy(int* strategy) {
         printf("\n");
         printf(" %d:ALWAYS_COOPERATE,",ALWAYS_COOPERATE);
         printf(" %d:MOSTLY_CHEAT, %d:JOKER,",MOSTLY_CHEAT,JOKER);
         printf(" %d:COPYCAT, %d:GRUDGER,",COPYCAT,GRUDGER);
         printf(" %d:COPYKITTEN\n",COPYKITTEN);
         printf(" Enter the strategy the computer should use: ");
         scanf("%d", strategy);
 }
 
 // Asks the user how many rounds to play
 void get_rounds(int *num_rounds) {
         printf("\n");
         printf(" Enter how many rounds you want to play:   ");
         scanf("%d", num_rounds);
         printf("\n");
 }
 
 // Asks the user whether the player cooperates or not
 // The result is passed back by the pointer 'move'
 void get_player_move(int *move) {
         printf(" Does the player cooperate (1) or not (0): ");
         scanf("%d", move);
 }
 
 // Prints the moves both players are making
 void print_moves(int move_player1, int move_player2) {
         printf(" Player 1 played %d", move_player1);
         printf(" and player 2 played %d \n", move_player2);
         printf("\n");
 }
 
 // Prints the final score for the two players 
 void print_scores(int score_player1, int score_player2) {
         printf(" Player 1 score:  %d\n", score_player1);
         printf(" Player 2 score:  %d\n", score_player2);
         printf("\n");
 }
  //random number generator between 1 and 0 given a probability, takes probability as decimal
 int myRandom(double prob){
 	double num = (double)rand() / RAND_MAX; //number b/w 0 and 1
 	if(num < prob){
 		return 1;
 	}
 	else if(num > prob){
 		return 0;
 	}
 	//return rand() % 2; //if ran number: even = 1; odd = 0
 }
 
 
 /**********************************************************************
  * These two functions decide on the move that the computer player makes, 
  * based on the strategy it is employing. You need to implement these 
  * functions and then also call them as part of the game of trust.
  *
  *      strategy:                The strategy used by the computer to 
  *                               decide the move. This corresponds to
  *                               the strategy constants defined earlier. 
  *      current_round:           The current round. We count rounds 
  *                               starting from 0 (for the first round).
  *      opponent_previous_move:  The move made by the other player in
  *                               the PREVIOUS round (1 for cooperate 
  *                               or 0 for cheat). Note that this is a 
  *                               parameter in the second function only.
  *      move:                    Pointer where the function will 
  *                               store the chosen move. This chosen
  *                               move is either 1 (for cooperate)
  *                               or 0 (for cheat).
 ***********************************************************************
 * This function supports the strategies "always cooperate", "mostly cheat" 
 * and "joker".
 ***********************************************************************/
 void get_computer_move(int strategy, int current_round, int *move) {
 	if(strategy ==1){ // always coorporate
 		*move = 1;
 	}
 	else if(strategy == 2){ //mostly cheat
 		if(current_round == 0){ //first round
 			*move = 1;
 		}
 		else{
 			*move = 0;
 		}
 	}
 	else{ //joker
 		*move = myRandom(PROBABILITY);	
 	}
 }
 
 /**********************************************************************
 * This function supports the strategies "copycat", "grudger" 
 * and "copykitten" (optional).
 ***********************************************************************/
 void get_computer_move2(int strategy, int current_round, int opponent_previous_move, int *move)  {	
 	static int cheatStreak = 0; // 2 represents cheat streak of 2
 	static int grudge = 0; // 0: no grudge, 1: grudge
 	if(strategy == 4){ //copycat
 		if(current_round == 0) //first round
 			*move = 1;
 		else{
 			*move = opponent_previous_move;
 		}
 	}
 	else if(strategy == 5){ //grudger
 		if(current_round == 0)
 			*move = 1;
 		else{
 			if(opponent_previous_move == 0){
 				grudge = 1;
 			}
 			if(grudge == 1){
 				*move = 0;
 			}
 			else{
 				*move = 1;
 			}
 		}
 	}
 	else{ // copykitten
 		if(opponent_previous_move == 0){ //cheat streak counter update
 			//printf("cheat streak check (before increment): %d", cheatStreak);
 			cheatStreak++;
 			//printf("cheat streak check: %d", cheatStreak);
 		}
 			if(current_round == 0){
 				*move = 1;
 			}
 			else{
 				if(cheatStreak == 2){ //if player cheated twice in a row
 					*move = 0;
 					cheatStreak = 0;
 					//printf("cheat streak criteria met ");
 				}
 				else{ //copy player if no cheat streak
 					*move = 1;
 					//printf("copying");
 				}
 			}
 	}
 }
 
 /**********************************************************************
  * Main functionality: Write your code for implementing the game of 
  *                     trust below.
  *                     You should seed the random number generator 
  *                     with a random value based on the current time.
 ***********************************************************************/
 
 int main(){
 	srand(time(NULL));
 	int strategy = -1;
 	get_strategy(&strategy);
 	int rounds = 0;
 	get_rounds(&rounds);
 
 	int p1 = 0;
 	int ai = 0;
 	int currentMoveP1 = -1;
 	int currentMoveAi = -1;
 
 	int i;
 	for(i=0; i< rounds; i++){
 		//getting moves of both ai and player
 		if(strategy <= 3){ // first method for ai move
 			get_computer_move(strategy, i, &currentMoveAi);
 		}
 		else{
 			get_computer_move2(strategy, i, currentMoveP1, &currentMoveAi);	
 		}
 		get_player_move(&currentMoveP1);
 		//changing the score according to results
 		if(currentMoveP1 == 1 && currentMoveAi == 1){ //both coorporate
 			p1 = p1 + 2;
 			ai = ai + 2;
 		}
 		else if(currentMoveP1 > currentMoveAi){ //only player coorporates, ai cheats
 			p1 = p1 - 1;
 			ai = ai + 3;
 		}
 		else if(currentMoveAi > currentMoveP1){ //only ai coorporates, player cheats
 			ai = ai - 1;
 			p1 = p1 + 3;
 		}
 		print_moves(currentMoveP1, currentMoveAi);
 	}
 	print_scores(p1, ai);
 	
 }
 
